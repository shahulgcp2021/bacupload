package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RoutingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoutingAllPropertiesEquals(Routing expected, Routing actual) {
        assertRoutingAutoGeneratedPropertiesEquals(expected, actual);
        assertRoutingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoutingAllUpdatablePropertiesEquals(Routing expected, Routing actual) {
        assertRoutingUpdatableFieldsEquals(expected, actual);
        assertRoutingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoutingAutoGeneratedPropertiesEquals(Routing expected, Routing actual) {
        assertThat(expected)
            .as("Verify Routing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoutingUpdatableFieldsEquals(Routing expected, Routing actual) {
        assertThat(expected)
            .as("Verify Routing relevant properties")
            .satisfies(e -> assertThat(e.getStep()).as("check step").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getStep()))
            .satisfies(
                e -> assertThat(e.getDuration()).as("check duration").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDuration())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoutingUpdatableRelationshipsEquals(Routing expected, Routing actual) {
        assertThat(expected)
            .as("Verify Routing relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
