package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeTravelAvgAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeTravelAvgAllPropertiesEquals(EmployeeTravelAvg expected, EmployeeTravelAvg actual) {
        assertEmployeeTravelAvgAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeTravelAvgAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeTravelAvgAllUpdatablePropertiesEquals(EmployeeTravelAvg expected, EmployeeTravelAvg actual) {
        assertEmployeeTravelAvgUpdatableFieldsEquals(expected, actual);
        assertEmployeeTravelAvgUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeTravelAvgAutoGeneratedPropertiesEquals(EmployeeTravelAvg expected, EmployeeTravelAvg actual) {
        assertThat(expected)
            .as("Verify EmployeeTravelAvg auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeTravelAvgUpdatableFieldsEquals(EmployeeTravelAvg expected, EmployeeTravelAvg actual) {
        assertThat(expected)
            .as("Verify EmployeeTravelAvg relevant properties")
            .satisfies(e -> assertThat(e.getTravelType()).as("check travelType").isEqualTo(actual.getTravelType()))
            .satisfies(e -> assertThat(e.getTravelMode()).as("check travelMode").isEqualTo(actual.getTravelMode()))
            .satisfies(e -> assertThat(e.getPeriodFrom()).as("check periodFrom").isEqualTo(actual.getPeriodFrom()))
            .satisfies(e -> assertThat(e.getPeriodTo()).as("check periodTo").isEqualTo(actual.getPeriodTo()))
            .satisfies(
                e ->
                    assertThat(e.getPctEmployees())
                        .as("check pctEmployees")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPctEmployees())
            )
            .satisfies(
                e ->
                    assertThat(e.getCommuteDaysPerWeek())
                        .as("check commuteDaysPerWeek")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCommuteDaysPerWeek())
            )
            .satisfies(
                e ->
                    assertThat(e.getPctDaysTravelled())
                        .as("check pctDaysTravelled")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPctDaysTravelled())
            )
            .satisfies(
                e ->
                    assertThat(e.getAvgTripsInPeriod())
                        .as("check avgTripsInPeriod")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAvgTripsInPeriod())
            )
            .satisfies(
                e ->
                    assertThat(e.getAvgTravelDistanceInKm())
                        .as("check avgTravelDistanceInKm")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAvgTravelDistanceInKm())
            )
            .satisfies(
                e ->
                    assertThat(e.getAvgHotelStayDaysPerTrip())
                        .as("check avgHotelStayDaysPerTrip")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAvgHotelStayDaysPerTrip())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeTravelAvgUpdatableRelationshipsEquals(EmployeeTravelAvg expected, EmployeeTravelAvg actual) {
        assertThat(expected)
            .as("Verify EmployeeTravelAvg relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()));
    }
}
