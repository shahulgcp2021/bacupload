package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DefaultAverageEFAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDefaultAverageEFAllPropertiesEquals(DefaultAverageEF expected, DefaultAverageEF actual) {
        assertDefaultAverageEFAutoGeneratedPropertiesEquals(expected, actual);
        assertDefaultAverageEFAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDefaultAverageEFAllUpdatablePropertiesEquals(DefaultAverageEF expected, DefaultAverageEF actual) {
        assertDefaultAverageEFUpdatableFieldsEquals(expected, actual);
        assertDefaultAverageEFUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDefaultAverageEFAutoGeneratedPropertiesEquals(DefaultAverageEF expected, DefaultAverageEF actual) {
        assertThat(expected)
            .as("Verify DefaultAverageEF auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDefaultAverageEFUpdatableFieldsEquals(DefaultAverageEF expected, DefaultAverageEF actual) {
        assertThat(expected)
            .as("Verify DefaultAverageEF relevant properties")
            .satisfies(e -> assertThat(e.getDomain()).as("check domain").isEqualTo(actual.getDomain()))
            .satisfies(e -> assertThat(e.getDetail()).as("check detail").isEqualTo(actual.getDetail()))
            .satisfies(e -> assertThat(e.getCountryOrRegion()).as("check countryOrRegion").isEqualTo(actual.getCountryOrRegion()))
            .satisfies(
                e ->
                    assertThat(e.getEmissionFactor())
                        .as("check emissionFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEmissionFactor())
            )
            .satisfies(e -> assertThat(e.getEfSource()).as("check efSource").isEqualTo(actual.getEfSource()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCodeType()).as("check codeType").isEqualTo(actual.getCodeType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDefaultAverageEFUpdatableRelationshipsEquals(DefaultAverageEF expected, DefaultAverageEF actual) {
        assertThat(expected)
            .as("Verify DefaultAverageEF relationships")
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
