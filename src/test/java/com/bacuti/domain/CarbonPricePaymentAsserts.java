package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CarbonPricePaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarbonPricePaymentAllPropertiesEquals(CarbonPricePayment expected, CarbonPricePayment actual) {
        assertCarbonPricePaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertCarbonPricePaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarbonPricePaymentAllUpdatablePropertiesEquals(CarbonPricePayment expected, CarbonPricePayment actual) {
        assertCarbonPricePaymentUpdatableFieldsEquals(expected, actual);
        assertCarbonPricePaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarbonPricePaymentAutoGeneratedPropertiesEquals(CarbonPricePayment expected, CarbonPricePayment actual) {
        assertThat(expected)
            .as("Verify CarbonPricePayment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarbonPricePaymentUpdatableFieldsEquals(CarbonPricePayment expected, CarbonPricePayment actual) {
        assertThat(expected)
            .as("Verify CarbonPricePayment relevant properties")
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(
                e ->
                    assertThat(e.getEurFxRate()).as("check eurFxRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getEurFxRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getAmountInEur())
                        .as("check amountInEur")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAmountInEur())
            )
            .satisfies(e -> assertThat(e.getEmissionFromDate()).as("check emissionFromDate").isEqualTo(actual.getEmissionFromDate()))
            .satisfies(e -> assertThat(e.getEmissionToDate()).as("check emissionToDate").isEqualTo(actual.getEmissionToDate()))
            .satisfies(e -> assertThat(e.getFormOfCarbonPrice()).as("check formOfCarbonPrice").isEqualTo(actual.getFormOfCarbonPrice()))
            .satisfies(
                e ->
                    assertThat(e.getPercentEmissionByPrice())
                        .as("check percentEmissionByPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentEmissionByPrice())
            )
            .satisfies(e -> assertThat(e.getFormOfRebate()).as("check formOfRebate").isEqualTo(actual.getFormOfRebate()))
            .satisfies(
                e ->
                    assertThat(e.getPercentEmissionByRebate())
                        .as("check percentEmissionByRebate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentEmissionByRebate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarbonPricePaymentUpdatableRelationshipsEquals(CarbonPricePayment expected, CarbonPricePayment actual) {
        assertThat(expected)
            .as("Verify CarbonPricePayment relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()));
    }
}
