package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class WastedisposalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWastedisposalAllPropertiesEquals(Wastedisposal expected, Wastedisposal actual) {
        assertWastedisposalAutoGeneratedPropertiesEquals(expected, actual);
        assertWastedisposalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWastedisposalAllUpdatablePropertiesEquals(Wastedisposal expected, Wastedisposal actual) {
        assertWastedisposalUpdatableFieldsEquals(expected, actual);
        assertWastedisposalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWastedisposalAutoGeneratedPropertiesEquals(Wastedisposal expected, Wastedisposal actual) {
        assertThat(expected)
            .as("Verify Wastedisposal auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWastedisposalUpdatableFieldsEquals(Wastedisposal expected, Wastedisposal actual) {
        assertThat(expected)
            .as("Verify Wastedisposal relevant properties")
            .satisfies(e -> assertThat(e.getStage()).as("check stage").isEqualTo(actual.getStage()))
            .satisfies(e -> assertThat(e.getWasteComponent()).as("check wasteComponent").isEqualTo(actual.getWasteComponent()))
            .satisfies(
                e -> assertThat(e.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getQuantity())
            )
            .satisfies(e -> assertThat(e.getDisposalMethod()).as("check disposalMethod").isEqualTo(actual.getDisposalMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWastedisposalUpdatableRelationshipsEquals(Wastedisposal expected, Wastedisposal actual) {
        assertThat(expected)
            .as("Verify Wastedisposal relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getDefaultAverageEF()).as("check defaultAverageEF").isEqualTo(actual.getDefaultAverageEF()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
