package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShipmentLegAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentLegAllPropertiesEquals(ShipmentLeg expected, ShipmentLeg actual) {
        assertShipmentLegAutoGeneratedPropertiesEquals(expected, actual);
        assertShipmentLegAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentLegAllUpdatablePropertiesEquals(ShipmentLeg expected, ShipmentLeg actual) {
        assertShipmentLegUpdatableFieldsEquals(expected, actual);
        assertShipmentLegUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentLegAutoGeneratedPropertiesEquals(ShipmentLeg expected, ShipmentLeg actual) {
        assertThat(expected)
            .as("Verify ShipmentLeg auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentLegUpdatableFieldsEquals(ShipmentLeg expected, ShipmentLeg actual) {
        assertThat(expected)
            .as("Verify ShipmentLeg relevant properties")
            .satisfies(e -> assertThat(e.getSegment()).as("check segment").isEqualTo(actual.getSegment()))
            .satisfies(e -> assertThat(e.getCarrier()).as("check carrier").isEqualTo(actual.getCarrier()))
            .satisfies(e -> assertThat(e.getMode()).as("check mode").isEqualTo(actual.getMode()))
            .satisfies(
                e -> assertThat(e.getDistance()).as("check distance").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDistance())
            )
            .satisfies(
                e ->
                    assertThat(e.getFromCoordinateLat())
                        .as("check fromCoordinateLat")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFromCoordinateLat())
            )
            .satisfies(
                e ->
                    assertThat(e.getFromCoordinateLong())
                        .as("check fromCoordinateLong")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFromCoordinateLong())
            )
            .satisfies(
                e ->
                    assertThat(e.getToCoordinateLat())
                        .as("check toCoordinateLat")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getToCoordinateLat())
            )
            .satisfies(
                e ->
                    assertThat(e.getToCoordinateLong())
                        .as("check toCoordinateLong")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getToCoordinateLong())
            )
            .satisfies(e -> assertThat(e.getFromIata()).as("check fromIata").isEqualTo(actual.getFromIata()))
            .satisfies(e -> assertThat(e.getToIata()).as("check toIata").isEqualTo(actual.getToIata()))
            .satisfies(
                e ->
                    assertThat(e.getEmissionsFactor())
                        .as("check emissionsFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEmissionsFactor())
            )
            .satisfies(e -> assertThat(e.getEfSource()).as("check efSource").isEqualTo(actual.getEfSource()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentLegUpdatableRelationshipsEquals(ShipmentLeg expected, ShipmentLeg actual) {
        assertThat(expected)
            .as("Verify ShipmentLeg relationships")
            .satisfies(e -> assertThat(e.getShipmentLane()).as("check shipmentLane").isEqualTo(actual.getShipmentLane()));
    }
}
