package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CompanyPublicEmissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyPublicEmissionAllPropertiesEquals(CompanyPublicEmission expected, CompanyPublicEmission actual) {
        assertCompanyPublicEmissionAutoGeneratedPropertiesEquals(expected, actual);
        assertCompanyPublicEmissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyPublicEmissionAllUpdatablePropertiesEquals(
        CompanyPublicEmission expected,
        CompanyPublicEmission actual
    ) {
        assertCompanyPublicEmissionUpdatableFieldsEquals(expected, actual);
        assertCompanyPublicEmissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyPublicEmissionAutoGeneratedPropertiesEquals(
        CompanyPublicEmission expected,
        CompanyPublicEmission actual
    ) {
        assertThat(expected)
            .as("Verify CompanyPublicEmission auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyPublicEmissionUpdatableFieldsEquals(CompanyPublicEmission expected, CompanyPublicEmission actual) {
        assertThat(expected)
            .as("Verify CompanyPublicEmission relevant properties")
            .satisfies(e -> assertThat(e.getReportingCompany()).as("check reportingCompany").isEqualTo(actual.getReportingCompany()))
            .satisfies(e -> assertThat(e.getReportingYear()).as("check reportingYear").isEqualTo(actual.getReportingYear()))
            .satisfies(
                e -> assertThat(e.getRevenue()).as("check revenue").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalEnergyInMwh())
                        .as("check totalEnergyInMwh")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalEnergyInMwh())
            )
            .satisfies(e -> assertThat(e.getPermanentEmployees()).as("check permanentEmployees").isEqualTo(actual.getPermanentEmployees()))
            .satisfies(e -> assertThat(e.getScope1()).as("check scope1").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getScope1()))
            .satisfies(
                e ->
                    assertThat(e.getScope2Location())
                        .as("check scope2Location")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getScope2Location())
            )
            .satisfies(
                e ->
                    assertThat(e.getScope2Market())
                        .as("check scope2Market")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getScope2Market())
            )
            .satisfies(e -> assertThat(e.getScope3()).as("check scope3").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getScope3()))
            .satisfies(
                e ->
                    assertThat(e.getCategory1()).as("check category1").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory1())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory2()).as("check category2").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory2())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory3()).as("check category3").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory3())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory4()).as("check category4").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory4())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory5()).as("check category5").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory5())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory6()).as("check category6").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory6())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory7()).as("check category7").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory7())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory8()).as("check category8").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory8())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory9()).as("check category9").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCategory9())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory10())
                        .as("check category10")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory10())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory11())
                        .as("check category11")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory11())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory12())
                        .as("check category12")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory12())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory13())
                        .as("check category13")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory13())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory14())
                        .as("check category14")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory14())
            )
            .satisfies(
                e ->
                    assertThat(e.getCategory15())
                        .as("check category15")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCategory15())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScope1())
                        .as("check intensityScope1")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScope1())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScope1Loction())
                        .as("check intensityScope1Loction")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScope1Loction())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityscope2Market())
                        .as("check intensityscope2Market")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityscope2Market())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScope3())
                        .as("check intensityScope3")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScope3())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScope12())
                        .as("check intensityScope12")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScope12())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScope123())
                        .as("check intensityScope123")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScope123())
            )
            .satisfies(
                e ->
                    assertThat(e.getActivityLevel())
                        .as("check activityLevel")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getActivityLevel())
            )
            .satisfies(e -> assertThat(e.getDataSourceType()).as("check dataSourceType").isEqualTo(actual.getDataSourceType()))
            .satisfies(e -> assertThat(e.getDisclosureType()).as("check disclosureType").isEqualTo(actual.getDisclosureType()))
            .satisfies(e -> assertThat(e.getDataSource()).as("check dataSource").isEqualTo(actual.getDataSource()))
            .satisfies(e -> assertThat(e.getIndustryCodes()).as("check industryCodes").isEqualTo(actual.getIndustryCodes()))
            .satisfies(e -> assertThat(e.getCodeType()).as("check codeType").isEqualTo(actual.getCodeType()))
            .satisfies(e -> assertThat(e.getCompanyWebsite()).as("check companyWebsite").isEqualTo(actual.getCompanyWebsite()))
            .satisfies(e -> assertThat(e.getCompanyActivities()).as("check companyActivities").isEqualTo(actual.getCompanyActivities()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyPublicEmissionUpdatableRelationshipsEquals(
        CompanyPublicEmission expected,
        CompanyPublicEmission actual
    ) {
        assertThat(expected)
            .as("Verify CompanyPublicEmission relationships")
            .satisfies(
                e -> assertThat(e.getRevenueUnitOfMeasure()).as("check revenueUnitOfMeasure").isEqualTo(actual.getRevenueUnitOfMeasure())
            )
            .satisfies(
                e ->
                    assertThat(e.getEmissionsUnitOfMeasure())
                        .as("check emissionsUnitOfMeasure")
                        .isEqualTo(actual.getEmissionsUnitOfMeasure())
            )
            .satisfies(
                e ->
                    assertThat(e.getEmissionIntensityUnitOfMeasure())
                        .as("check emissionIntensityUnitOfMeasure")
                        .isEqualTo(actual.getEmissionIntensityUnitOfMeasure())
            )
            .satisfies(
                e ->
                    assertThat(e.getActivitylevelUnitOfMeasure())
                        .as("check activitylevelUnitOfMeasure")
                        .isEqualTo(actual.getActivitylevelUnitOfMeasure())
            );
    }
}
