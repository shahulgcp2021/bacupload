package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AggregateEnergyUsageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregateEnergyUsageAllPropertiesEquals(AggregateEnergyUsage expected, AggregateEnergyUsage actual) {
        assertAggregateEnergyUsageAutoGeneratedPropertiesEquals(expected, actual);
        assertAggregateEnergyUsageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregateEnergyUsageAllUpdatablePropertiesEquals(AggregateEnergyUsage expected, AggregateEnergyUsage actual) {
        assertAggregateEnergyUsageUpdatableFieldsEquals(expected, actual);
        assertAggregateEnergyUsageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregateEnergyUsageAutoGeneratedPropertiesEquals(AggregateEnergyUsage expected, AggregateEnergyUsage actual) {
        assertThat(expected)
            .as("Verify AggregateEnergyUsage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregateEnergyUsageUpdatableFieldsEquals(AggregateEnergyUsage expected, AggregateEnergyUsage actual) {
        assertThat(expected)
            .as("Verify AggregateEnergyUsage relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getUsage()).as("check usage").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUsage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregateEnergyUsageUpdatableRelationshipsEquals(AggregateEnergyUsage expected, AggregateEnergyUsage actual) {
        assertThat(expected)
            .as("Verify AggregateEnergyUsage relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(e -> assertThat(e.getEnergySource()).as("check energySource").isEqualTo(actual.getEnergySource()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
