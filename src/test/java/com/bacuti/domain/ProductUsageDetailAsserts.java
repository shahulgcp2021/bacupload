package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductUsageDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUsageDetailAllPropertiesEquals(ProductUsageDetail expected, ProductUsageDetail actual) {
        assertProductUsageDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertProductUsageDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUsageDetailAllUpdatablePropertiesEquals(ProductUsageDetail expected, ProductUsageDetail actual) {
        assertProductUsageDetailUpdatableFieldsEquals(expected, actual);
        assertProductUsageDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUsageDetailAutoGeneratedPropertiesEquals(ProductUsageDetail expected, ProductUsageDetail actual) {
        assertThat(expected)
            .as("Verify ProductUsageDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUsageDetailUpdatableFieldsEquals(ProductUsageDetail expected, ProductUsageDetail actual) {
        assertThat(expected)
            .as("Verify ProductUsageDetail relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getUsefulLifeYrs())
                        .as("check usefulLifeYrs")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUsefulLifeYrs())
            )
            .satisfies(e -> assertThat(e.getEmissionSource()).as("check emissionSource").isEqualTo(actual.getEmissionSource()))
            .satisfies(e -> assertThat(e.getDetail()).as("check detail").isEqualTo(actual.getDetail()))
            .satisfies(
                e ->
                    assertThat(e.getAvgQuantityPerDay())
                        .as("check avgQuantityPerDay")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAvgQuantityPerDay())
            )
            .satisfies(
                e ->
                    assertThat(e.getProportion())
                        .as("check proportion")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProportion())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUsageDetailUpdatableRelationshipsEquals(ProductUsageDetail expected, ProductUsageDetail actual) {
        assertThat(expected)
            .as("Verify ProductUsageDetail relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
