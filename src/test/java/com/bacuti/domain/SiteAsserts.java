package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SiteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteAllPropertiesEquals(Site expected, Site actual) {
        assertSiteAutoGeneratedPropertiesEquals(expected, actual);
        assertSiteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteAllUpdatablePropertiesEquals(Site expected, Site actual) {
        assertSiteUpdatableFieldsEquals(expected, actual);
        assertSiteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteAutoGeneratedPropertiesEquals(Site expected, Site actual) {
        assertThat(expected)
            .as("Verify Site auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteUpdatableFieldsEquals(Site expected, Site actual) {
        assertThat(expected)
            .as("Verify Site relevant properties")
            .satisfies(e -> assertThat(e.getSiteName()).as("check siteName").isEqualTo(actual.getSiteName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getManufacturingSite()).as("check manufacturingSite").isEqualTo(actual.getManufacturingSite()))
            .satisfies(e -> assertThat(e.getEmployeeCount()).as("check employeeCount").isEqualTo(actual.getEmployeeCount()))
            .satisfies(e -> assertThat(e.getCbamImpacted()).as("check cbamImpacted").isEqualTo(actual.getCbamImpacted()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(
                e ->
                    assertThat(e.getLattitude()).as("check lattitude").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLattitude())
            )
            .satisfies(
                e ->
                    assertThat(e.getLongitude()).as("check longitude").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLongitude())
            )
            .satisfies(e -> assertThat(e.getUnlocode()).as("check unlocode").isEqualTo(actual.getUnlocode()))
            .satisfies(e -> assertThat(e.getDataQualityDesc()).as("check dataQualityDesc").isEqualTo(actual.getDataQualityDesc()))
            .satisfies(
                e ->
                    assertThat(e.getDefaultValueUsageJustfn())
                        .as("check defaultValueUsageJustfn")
                        .isEqualTo(actual.getDefaultValueUsageJustfn())
            )
            .satisfies(e -> assertThat(e.getDataQAInfo()).as("check dataQAInfo").isEqualTo(actual.getDataQAInfo()))
            .satisfies(e -> assertThat(e.getDefaultHeatNumber()).as("check defaultHeatNumber").isEqualTo(actual.getDefaultHeatNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteUpdatableRelationshipsEquals(Site expected, Site actual) {
        assertThat(expected)
            .as("Verify Site relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}
