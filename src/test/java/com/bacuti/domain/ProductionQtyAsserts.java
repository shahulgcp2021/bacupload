package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductionQtyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductionQtyAllPropertiesEquals(ProductionQty expected, ProductionQty actual) {
        assertProductionQtyAutoGeneratedPropertiesEquals(expected, actual);
        assertProductionQtyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductionQtyAllUpdatablePropertiesEquals(ProductionQty expected, ProductionQty actual) {
        assertProductionQtyUpdatableFieldsEquals(expected, actual);
        assertProductionQtyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductionQtyAutoGeneratedPropertiesEquals(ProductionQty expected, ProductionQty actual) {
        assertThat(expected)
            .as("Verify ProductionQty auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductionQtyUpdatableFieldsEquals(ProductionQty expected, ProductionQty actual) {
        assertThat(expected)
            .as("Verify ProductionQty relevant properties")
            .satisfies(e -> assertThat(e.getProductionnDate()).as("check productionnDate").isEqualTo(actual.getProductionnDate()))
            .satisfies(
                e -> assertThat(e.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getQuantity())
            )
            .satisfies(e -> assertThat(e.getHeatNumber()).as("check heatNumber").isEqualTo(actual.getHeatNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductionQtyUpdatableRelationshipsEquals(ProductionQty expected, ProductionQty actual) {
        assertThat(expected)
            .as("Verify ProductionQty relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
