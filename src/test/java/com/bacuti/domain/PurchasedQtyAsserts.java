package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchasedQtyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasedQtyAllPropertiesEquals(PurchasedQty expected, PurchasedQty actual) {
        assertPurchasedQtyAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchasedQtyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasedQtyAllUpdatablePropertiesEquals(PurchasedQty expected, PurchasedQty actual) {
        assertPurchasedQtyUpdatableFieldsEquals(expected, actual);
        assertPurchasedQtyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasedQtyAutoGeneratedPropertiesEquals(PurchasedQty expected, PurchasedQty actual) {
        assertThat(expected)
            .as("Verify PurchasedQty auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasedQtyUpdatableFieldsEquals(PurchasedQty expected, PurchasedQty actual) {
        assertThat(expected)
            .as("Verify PurchasedQty relevant properties")
            .satisfies(e -> assertThat(e.getPurchaseDate()).as("check purchaseDate").isEqualTo(actual.getPurchaseDate()))
            .satisfies(
                e -> assertThat(e.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getQuantity())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalEmissions())
                        .as("check totalEmissions")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalEmissions())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasedQtyUpdatableRelationshipsEquals(PurchasedQty expected, PurchasedQty actual) {
        assertThat(expected)
            .as("Verify PurchasedQty relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getItem()).as("check item").isEqualTo(actual.getItem()))
            .satisfies(e -> assertThat(e.getItemSupplier()).as("check itemSupplier").isEqualTo(actual.getItemSupplier()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
