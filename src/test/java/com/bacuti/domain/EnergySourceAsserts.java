package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EnergySourceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnergySourceAllPropertiesEquals(EnergySource expected, EnergySource actual) {
        assertEnergySourceAutoGeneratedPropertiesEquals(expected, actual);
        assertEnergySourceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnergySourceAllUpdatablePropertiesEquals(EnergySource expected, EnergySource actual) {
        assertEnergySourceUpdatableFieldsEquals(expected, actual);
        assertEnergySourceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnergySourceAutoGeneratedPropertiesEquals(EnergySource expected, EnergySource actual) {
        assertThat(expected)
            .as("Verify EnergySource auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnergySourceUpdatableFieldsEquals(EnergySource expected, EnergySource actual) {
        assertThat(expected)
            .as("Verify EnergySource relevant properties")
            .satisfies(e -> assertThat(e.getEnergyType()).as("check energyType").isEqualTo(actual.getEnergyType()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(
                e ->
                    assertThat(e.getCo2EmissionFactor())
                        .as("check co2EmissionFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCo2EmissionFactor())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpstreamCo2EF())
                        .as("check upstreamCo2EF")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUpstreamCo2EF())
            )
            .satisfies(e -> assertThat(e.getEfUnits()).as("check efUnits").isEqualTo(actual.getEfUnits()))
            .satisfies(e -> assertThat(e.getSourceForEf()).as("check sourceForEf").isEqualTo(actual.getSourceForEf()))
            .satisfies(
                e ->
                    assertThat(e.getPercentRenewableSrc())
                        .as("check percentRenewableSrc")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentRenewableSrc())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnergySourceUpdatableRelationshipsEquals(EnergySource expected, EnergySource actual) {
        assertThat(expected)
            .as("Verify EnergySource relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(
                e -> assertThat(e.getCompanyPublicEmission()).as("check companyPublicEmission").isEqualTo(actual.getCompanyPublicEmission())
            )
            .satisfies(e -> assertThat(e.getDefaultAverageEF()).as("check defaultAverageEF").isEqualTo(actual.getDefaultAverageEF()));
    }
}
