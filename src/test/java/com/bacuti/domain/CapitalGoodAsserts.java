package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CapitalGoodAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCapitalGoodAllPropertiesEquals(CapitalGood expected, CapitalGood actual) {
        assertCapitalGoodAutoGeneratedPropertiesEquals(expected, actual);
        assertCapitalGoodAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCapitalGoodAllUpdatablePropertiesEquals(CapitalGood expected, CapitalGood actual) {
        assertCapitalGoodUpdatableFieldsEquals(expected, actual);
        assertCapitalGoodUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCapitalGoodAutoGeneratedPropertiesEquals(CapitalGood expected, CapitalGood actual) {
        assertThat(expected)
            .as("Verify CapitalGood auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCapitalGoodUpdatableFieldsEquals(CapitalGood expected, CapitalGood actual) {
        assertThat(expected)
            .as("Verify CapitalGood relevant properties")
            .satisfies(e -> assertThat(e.getAssetName()).as("check assetName").isEqualTo(actual.getAssetName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(e -> assertThat(e.getPurchaseDate()).as("check purchaseDate").isEqualTo(actual.getPurchaseDate()))
            .satisfies(
                e ->
                    assertThat(e.getPurchasePrice())
                        .as("check purchasePrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPurchasePrice())
            )
            .satisfies(
                e ->
                    assertThat(e.getUsefulLife())
                        .as("check usefulLife")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUsefulLife())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityUnits())
                        .as("check intensityUnits")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityUnits())
            )
            .satisfies(
                e ->
                    assertThat(e.getScalingFactor())
                        .as("check scalingFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getScalingFactor())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCapitalGoodUpdatableRelationshipsEquals(CapitalGood expected, CapitalGood actual) {
        assertThat(expected)
            .as("Verify CapitalGood relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(e -> assertThat(e.getEmissionDb()).as("check emissionDb").isEqualTo(actual.getEmissionDb()));
    }
}
