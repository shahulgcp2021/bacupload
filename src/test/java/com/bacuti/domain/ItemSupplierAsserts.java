package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ItemSupplierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemSupplierAllPropertiesEquals(ItemSupplier expected, ItemSupplier actual) {
        assertItemSupplierAutoGeneratedPropertiesEquals(expected, actual);
        assertItemSupplierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemSupplierAllUpdatablePropertiesEquals(ItemSupplier expected, ItemSupplier actual) {
        assertItemSupplierUpdatableFieldsEquals(expected, actual);
        assertItemSupplierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemSupplierAutoGeneratedPropertiesEquals(ItemSupplier expected, ItemSupplier actual) {
        assertThat(expected)
            .as("Verify ItemSupplier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemSupplierUpdatableFieldsEquals(ItemSupplier expected, ItemSupplier actual) {
        assertThat(expected)
            .as("Verify ItemSupplier relevant properties")
            .satisfies(e -> assertThat(e.getSupplierOwnItem()).as("check supplierOwnItem").isEqualTo(actual.getSupplierOwnItem()))
            .satisfies(
                e ->
                    assertThat(e.getSupplierMix())
                        .as("check supplierMix")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSupplierMix())
            )
            .satisfies(
                e ->
                    assertThat(e.getSupplierEmissionMultiplier())
                        .as("check supplierEmissionMultiplier")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSupplierEmissionMultiplier())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityUnits())
                        .as("check intensityUnits")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityUnits())
            )
            .satisfies(
                e ->
                    assertThat(e.getIntensityScalingFactor())
                        .as("check intensityScalingFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIntensityScalingFactor())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemSupplierUpdatableRelationshipsEquals(ItemSupplier expected, ItemSupplier actual) {
        assertThat(expected)
            .as("Verify ItemSupplier relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getItem()).as("check item").isEqualTo(actual.getItem()))
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(
                e -> assertThat(e.getCompanyPublicEmission()).as("check companyPublicEmission").isEqualTo(actual.getCompanyPublicEmission())
            );
    }
}
