package com.bacuti.domain;

import static com.bacuti.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BillofMaterialAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillofMaterialAllPropertiesEquals(BillofMaterial expected, BillofMaterial actual) {
        assertBillofMaterialAutoGeneratedPropertiesEquals(expected, actual);
        assertBillofMaterialAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillofMaterialAllUpdatablePropertiesEquals(BillofMaterial expected, BillofMaterial actual) {
        assertBillofMaterialUpdatableFieldsEquals(expected, actual);
        assertBillofMaterialUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillofMaterialAutoGeneratedPropertiesEquals(BillofMaterial expected, BillofMaterial actual) {
        assertThat(expected)
            .as("Verify BillofMaterial auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillofMaterialUpdatableFieldsEquals(BillofMaterial expected, BillofMaterial actual) {
        assertThat(expected)
            .as("Verify BillofMaterial relevant properties")
            .satisfies(
                e -> assertThat(e.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getQuantity())
            )
            .satisfies(
                e ->
                    assertThat(e.getYieldFactor())
                        .as("check yieldFactor")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getYieldFactor())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillofMaterialUpdatableRelationshipsEquals(BillofMaterial expected, BillofMaterial actual) {
        assertThat(expected)
            .as("Verify BillofMaterial relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getComponent()).as("check component").isEqualTo(actual.getComponent()))
            .satisfies(e -> assertThat(e.getUnitOfMeasure()).as("check unitOfMeasure").isEqualTo(actual.getUnitOfMeasure()));
    }
}
